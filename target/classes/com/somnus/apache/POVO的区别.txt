java的PO,VO,DTO(TO),BO,DAO,POJO解释
POJO(Plain Old Java Object):
1：无规则java对象，一个中间对象，可以转换为PO，VO，DTO
2：POJO包括PO，VO，DTO
3：一个POJO持久化以后就是PO直接用它传递、传递过程中就是DTO直接用来对应表示层就是VO

PO(Persistence Object):
1：持久化对象，作用在持久层，由get和set，构造方法组成，一个PO对应数据库中一条记录，不进行任何对数据库的操作
PO属性跟数据库字段一一对应，PO对象需要实现序列化接口。
2：PO是hibernate纳入实体(Entity)对象，代表与数据库中某条记录相对应的hibernate实体,
在service层进行PO转换为VO在表现层显示
 
BO(Businesss Object):
1：业务对象，通常将BO转化成PO，才能进行数据的持久化，反之，从DB中得到的PO，需要转化成BO才能在业务层使用。
2：一个BO包括多个PO，比如一个简历，有教育经历、工作经历、社会关系等等。
我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。
建立一个对应简历的BO对象处理简历，每个BO包含这些PO。这样处理业务逻辑时，我们就可以针对BO去处理。
3:封装业务逻辑的java对象,通过调用DAO方法,结合PO,VO进行业务操作。

VO(Value Object):
1：值对象，作用在表现层，由get和set，构造方法组成，主要对应页面显示的数据对象。
2：主要指用户提交的数据，如表单提交的数据，都封装到一个VO中，通常一个VO可以对应多个PO，
也可以是PO的部分，VO到持久层PO需要进行转换，可以使用BeanUtils的copy方法。

DTO(Data Transfer Object):
1:数据传输对象，在应用程序不同tie(关系)之间传输的对象
2：可以简称为TO(Transfer Object)
3：主要用于远程调用等需要大量传输对象的地方。
比如我们一张表有100个字段，那么对应的PO就有100个属性。
但是我们界面上只要显示10个字段，客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，
这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构到达客户端以后，
如果用这个对象来对应界面显示，那此时它的身份就转为VO

DAO(Data Access Object):
1：数据访问对象，实现业务逻辑的java类，主要负责封装对DB的CRUD操作
2：通过它可以把POJO持久化为PO，用PO组装出来VO、DTO

PO与VO分开的好处：
它们的关系应该是相互独立的，一个VO可以只是PO的部分，也可以是多个PO构成，同样也可以等同于一个PO（当然我是指他们的属性）。
正因为这样，PO独立出来数据持久层也就独立出来了，它不会受到任何业务的干涉。又正因为这样，业务逻辑层也独立开来，
它不会受到数据持久层的影响，业务层关心的只是业务逻辑的处理，至于怎么存怎么读交给别人吧！

在MVC开发模式中：
控制层使用VO对象,数据层使用PO对象,业务层负责将PO对象转换成VO对象传递给控制层
VO和PO对象之间转换可以用BeanUtils.copyProperties(VO, PO)方法
